{
  
    
        "post0": {
            "title": "Title",
            "content": "Copyright &copy; 2020 The Apache Software Foundation. . #- # # Licensed to the Apache Software Foundation (ASF) under one # or more contributor license agreements. See the NOTICE file # distributed with this work for additional information # regarding copyright ownership. The ASF licenses this file # to you under the Apache License, Version 2.0 (the # &quot;License&quot;); you may not use this file except in compliance # with the License. You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, # software distributed under the License is distributed on an # &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY # KIND, either express or implied. See the License for the # specific language governing permissions and limitations # under the License. # #- . Developer notebook for Apache SystemDS . Run this notebook online at Google Colab ↗. . This Jupyter/Colab-based tutorial will interactively walk through development setup and running SystemDS in both the . A. standalone mode B. with Apache Spark. . Flow of the notebook: . Download and Install the dependencies | Go to section A or B | Download and Install the dependencies . Runtime: Java (OpenJDK 8 is preferred) | Build: Apache Maven | Backend: Apache Spark (optional) | Setup . A custom function to run OS commands. . def run(command): print(&#39;&gt;&gt; {}&#39;.format(command)) !{command} print(&#39;&#39;) . Install Java . Let us install OpenJDK 8. More about OpenJDK ↗. . !apt-get update !apt-get install openjdk-8-jdk-headless -qq &gt; /dev/null # run the below command to replace the existing installation !update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java import os os.environ[&quot;JAVA_HOME&quot;] = &quot;/usr/lib/jvm/java-8-openjdk-amd64&quot; !java -version . Install Apache Maven . SystemDS uses Apache Maven to build and manage the project. More about Apache Maven ↗. . Maven builds SystemDS using its project object model (POM) and a set of plugins. One would find pom.xml find the codebase! . maven_version = &#39;apache-maven-3.6.3&#39; maven_path = f&quot;/opt/{maven_version}&quot; if not os.path.exists(maven_path): run(f&quot;wget -q -nc -O apache-maven.zip https://downloads.apache.org/maven/maven-3/3.6.3/binaries/{maven_version}-bin.zip&quot;) run(&#39;unzip -q -d /opt apache-maven.zip&#39;) run(&#39;rm -f apache-maven.zip&#39;) # Let&#39;s choose the absolute path instead of $PATH environment variable. def maven(args): run(f&quot;{maven_path}/bin/mvn {args}&quot;) maven(&#39;-v&#39;) . Install Apache Spark (Optional, if you want to work with spark backend) . NOTE: If spark is not downloaded. Let us make sure the version we are trying to download is officially supported at https://spark.apache.org/downloads.html . spark_version = &#39;spark-2.4.7&#39; hadoop_version = &#39;hadoop2.7&#39; spark_path = f&quot;/opt/{spark_version}-bin-{hadoop_version}&quot; if not os.path.exists(spark_path): run(f&quot;wget -q -nc -O apache-spark.tgz https://downloads.apache.org/spark/{spark_version}/{spark_version}-bin-{hadoop_version}.tgz&quot;) run(&#39;tar zxfv apache-spark.tgz -C /opt&#39;) run(&#39;rm -f apache-spark.tgz&#39;) os.environ[&quot;SPARK_HOME&quot;] = spark_path os.environ[&quot;PATH&quot;] += &quot;:$SPARK_HOME/bin&quot; . Get Apache SystemDS . Apache SystemDS development happens on GitHub at apache/systemds ↗ . !git clone https://github.com/apache/systemds systemds --depth=1 %cd systemds . Build the project . # Option 1: Build only the java codebase maven(&#39;clean package -q&#39;) # Option 2: For building along with python distribution # maven(&#39;clean package -P distribution&#39;) . A. Working with SystemDS in standalone mode . NOTE: Let&#39;s pay attention to directories and relative paths. :) . 1. Set SystemDS environment variables . These are useful for the ./bin/systemds script. . !export SYSTEMDS_ROOT=$(pwd) !export PATH=$SYSTEMDS_ROOT/bin:$PATH . 2. Download Haberman data . Data source: https://archive.ics.uci.edu/ml/datasets/Haberman&#39;s+Survival . About: The survival of patients who had undergone surgery for breast cancer. . Data Attributes: . Age of patient at time of operation (numerical) | Patient&#39;s year of operation (year - 1900, numerical) | Number of positive axillary nodes detected (numerical) | Survival status (class attribute) 1 = the patient survived 5 years or longer | 2 = the patient died within 5 year | . | !mkdir ../data . !wget -P ../data/ https://web.archive.org/web/20200725014530/https://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data . # Notice that the test is plain csv with no headers! !sed -n 1,10p ../data/haberman.data . 2.1 Set metadata for the data . The data does not have any info on the value types. So, metadata for the data helps know the size and format for the matrix data as .mtd file with the same name and location as .data file. . !echo &#39;{&quot;rows&quot;: 306, &quot;cols&quot;: 4, &quot;format&quot;: &quot;csv&quot;}&#39; &gt; ../data/haberman.data.mtd # generate type description for the data !echo &#39;1,1,1,2&#39; &gt; ../data/types.csv !echo &#39;{&quot;rows&quot;: 1, &quot;cols&quot;: 4, &quot;format&quot;: &quot;csv&quot;}&#39; &gt; ../data/types.csv.mtd . 3. Find the algorithm to run with systemds . !ls . !ls scripts/algorithms . # Output the algorithm documentation # start from line no. 22 onwards. Till 35th line the command looks like !sed -n 22,35p ./scripts/algorithms/Univar-Stats.dml . !./bin/systemds ./scripts/algorithms/Univar-Stats.dml -nvargs X=../data/haberman.data TYPES=../data/types.csv STATS=../data/univarOut.mtx CONSOLE_OUTPUT=TRUE . 3.1 Let us inspect the output data . !sed -n 1,10p ../data/univarOut.mtx . B. Run SystemDS with Apache Spark . Playground for DML scripts . DML - A custom language designed for SystemDS with R-like syntax. . A test dml script to prototype algorithms . Modify the code in the below cell and run to work develop data science tasks in a high level language. . %%writefile ../test.dml # This code code acts as a playground for dml code X = rand (rows = 20, cols = 10) y = X %*% rand(rows = ncol(X), cols = 1) lm(X = X, y = y) . Submit the dml script to Spark with spark-submit. More about Spark Submit ↗ . !$SPARK_HOME/bin/spark-submit ./target/SystemDS.jar -f ../test.dml . Run a binary classification example with sample data . One would notice that no other script than simple dml is used in this example completely. . # !$SPARK_HOME/bin/spark-submit ./target/SystemDS.jar -f ./scripts/nn/examples/fm-binclass-dummy-data.dml .",
            "url": "https://j143.github.io/tech-insights/2021/05/17/systemds-on-colaboratory.html",
            "relUrl": "/2021/05/17/systemds-on-colaboratory.html",
            "date": " • May 17, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://j143.github.io/tech-insights/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://j143.github.io/tech-insights/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://j143.github.io/tech-insights/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://j143.github.io/tech-insights/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}